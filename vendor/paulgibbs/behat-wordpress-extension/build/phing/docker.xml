<?xml version="1.0" encoding="UTF-8"?>
<?xml-model xlink:href="/usr/share/php5/PEAR/data/phing/etc/phing-grammar.rng"
            type="application/xml"
            schematypens="http://relaxng.org/ns/structure/1.0" ?>
<project name="docker" default="behat:run">
  <property name="docker.bin" value="docker"/>
  <property name="docker.user" value="www-data"/>
  <property name="docker.test-entry" value="vendor/bin/phing behat:exec-tests"/>
  <property name="docker.phpstan-entry" value="vendor/bin/phing wordhat:phpstan"/>
  <property name="docker.test-workdir" value="/wordhat"/>
  <property name="docker.test-container" value="docker_wordpress_1"/>
  <property name="docker-compose.bin" value="docker-compose"/>
  <property name="docker-compose.file" value="${project.basedir}/build/docker/docker-compose.yml"/>
  <property name="docker.build-dir" value="build/docker/"/>
  <property name="docker.repository-password" value="${env.REPOSITORY_PASS}"/>
  <property name="docker.repository-user" value="${env.REPOSITORY_USER}"/>
  <property name="wordhat.image-name" value="wordhat/automation:${wordhat.wordpress-version}-php${wordhat.php-version}"/>

  <target name="docker:push" description="Logs into the docker repository">
    <if>
      <os family="windows"/>
      <then>
        <pathconvert targetos="windows" property="docker.bin">
          <path path="${docker.bin}"/>
        </pathconvert>
      </then>
    </if>
    <exec command="${docker.bin} login -u &quot;${docker.repository-user}&quot; -p &quot;${docker.repository-password}&quot;" passthru="true" checkreturn="true"/>
    <exec command="${docker.bin} push &quot;${wordhat.image-name}&quot;" passthru="true" checkreturn="true"/>
  </target>

  <target name="docker:build" description="Builds the wordhat/automation docker image">
    <if>
      <os family="windows"/>
      <then>
        <pathconvert targetos="windows" property="docker.bin">
          <path path="${docker.bin}"/>
        </pathconvert>
      </then>
    </if>
    <exec command="${docker.bin} pull ${wordhat.image-name}" passthru="true" checkreturn="false"/>
    <exec command="pwd" logoutput="true" />
    <exec command="${docker.bin} build . -f ./${docker.build-dir}/Dockerfile --pull --cache-from &quot;${wordhat.image-name}&quot; --tag &quot;${wordhat.image-name}&quot;" passthru="true" checkreturn="true"/>
  </target>

  <target name="docker:up" description="Brings up the docker infrastructure.">
    <if>
      <os family="windows"/>
      <then>
        <pathconvert targetos="windows" property="docker-compose.bin">
          <path path="${docker-compose.bin}"/>
        </pathconvert>
      </then>
    </if>
    <exec command="${docker-compose.bin} --no-ansi -f ${docker-compose.file} up --build -d" passthru="true" checkreturn="true"/>
  </target>

  <target name="docker:stop" description="Tears down the docker infrastructure.">
    <if>
      <os family="windows"/>
      <then>
        <pathconvert targetos="windows" property="docker-compose.bin">
          <path path="${docker-compose.bin}"/>
        </pathconvert>
        <pathconvert targetos="windows" property="docker-compose.file">
          <path path="${docker-compose.file}"/>
        </pathconvert>
      </then>
    </if>
    <exec command="${docker-compose.bin} --no-ansi -f ${docker-compose.file} stop" passthru="true" checkreturn="true"/>
  </target>

  <target name="docker:exec-tests" description="Executes the test stages inside the docker image.">
    <phingcall target="docker:phpstan"/>
    <phingcall target="docker:exec-integration-tests"/>
  </target>
  <target name="docker:exec-integration-tests" description="Executes the integration tests inside the docker image.">
    <if>
      <os family="windows"/>
      <then>
        <pathconvert targetos="windows" property="docker.bin">
          <path path="${docker.bin}"/>
        </pathconvert>
      </then>
    </if>
    <exec command="${docker.bin} exec -u ${docker.user} ${docker.test-container} sh -c &quot;cd ${docker.test-workdir} &amp;&amp; ${docker.test-entry}&quot;" passthru="true" checkreturn="true"/>
  </target>

  <target name="docker:phpstan" description="Executes the integration tests inside the docker image.">
    <if>
      <os family="windows"/>
      <then>
        <pathconvert targetos="windows" property="docker.bin">
          <path path="${docker.bin}"/>
        </pathconvert>
      </then>
    </if>
    <exec command="${docker.bin} exec -u ${docker.user} ${docker.test-container} sh -c &quot;cd ${docker.test-workdir} &amp;&amp; ${docker.phpstan-entry}&quot;" passthru="true" checkreturn="true"/>
  </target>

  <target name="docker:cleanup" description="Kills the containers and removes the volumes for a clean restart">
    <if>
      <os family="windows"/>
      <then>
        <pathconvert targetos="windows" property="docker-compose.bin">
          <path path="${docker-compose.bin}"/>
        </pathconvert>
        <pathconvert targetos="windows" property="docker-compose.file">
          <path path="${docker-compose.file}"/>
        </pathconvert>
      </then>
    </if>
    <exec command="${docker-compose.bin} --no-ansi -f ${docker-compose.file} rm -f &amp;&amp; ${docker.bin} volume prune -f" passthru="true" checkreturn="true"/>
  </target>
</project>
